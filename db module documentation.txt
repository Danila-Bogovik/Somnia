Необходимые библиотеки:
mysql-connector-python 

Важно:
через pip можно установить mysql и mysql-connector, но они не подходят. нужен именно mysql-connector-python

Перед подключением этого модуля, вы должны создать на сервере базу данных, которую будете использовать. Используемую вами бд вы можете
указать в файле 'connection config.txt' следующим образом:
database:<название базы данных>
По умолчанию database:test


Остальные пункты так-же должны соответствовать подключению. 
Через 'connection config.txt' вы можете настроить необходимое вам подключение.

Если вы удалили 'connection config.txt', ничего страшного. Вы можете запустить программу без него, и вам предложат настроить подключение из консоли.
На основе вашего ввода будет создан новый файл настроек.

Модуль содержит следующие функции:

add_new_article - добавляет новые статьи в базу данных. Вызывает внутри себя функцию для валидации.
	Принимает три параметра: заголовок, подзаголовок и текст с ограниченной длинной. все границы указаны в начале.

add_picture - добавляет новые картинки в базу данных. по возможности валидирует данные. принимает саму картинку в формате bytes, 
а так-же название и формат этой картинки. Допустимые форматы: image/png, image/bmp, image/gif, image/jpeg. 
Очень важно сохранять данные в правильном формате, т.к. Без него не будет понятно как расшифровать бинарь.

add_link_to_article - добавляет ссылку на статью. принимает ссылку, и id статьи.

get_link_by_id - принимает id, и возвращает url ссылку на него в виде строки.

get_id_by_link - прмнммает url ссылку, и возвращает id. 

find_by_substring_in_title - ищет по подстроке в названии. принимает подстроку. в случае если статей по подстроке не найденно, возвращает None.
Важно: устарела. не рекомендуется к использованию

get_data_for_search_by_substrinng - выдаёт данные, нужные для поиска статей. принимает строку и 2 целых числа.
Возвращает информацию в виде: [(id1, title1, subtitle1, date1), (id2, title2, subtitle2, date2), ..., (idN, titleN, subtitleN, dateN)]
если строка является подстрокой заголовка какой-либо статьи, то она будет отправленна пользователю. 2 других параметра нужны 
чтобы ограничить количиство страниц, есть 2 числовых параметра: amount и skip. Первый отвечает за количество. Второй за то, сколько будет пропущено.
Допустим, нам нужно чтобы пользователь получил только 10 первых статей, название которых содержат слово "кот".
Вызовим следующую функцию: get_data_for_search_by_substrinng("кот", 10, 0)
Он их уже все просмотрел, и хочет получить следующие 10:
get_data_for_search_by_substrinng("кот", 10, 10)


find_by_id - то-же самое что и find_by_substring_in_title, но принимает id, и ищет по id.

find_picture_by_name(name) - Находит картинку по её имени, и возвращает. 
В отличие от предыдущих, эта функция возврщает не список с картежем, а просто картеж.

delete_article_from_db - принимает id статьи, и удаляет статью с этим id из базы данных.

delete_picture_from_db - принимает name этой картинки, и удаляет её из базы данных.



Таблица articles имеет следующую структуру:
articles (
	id INTEGER PRIMARY KEY AUTO_INCREMENT,
	title VARCHAR(50) NOT NULL,
	subtitle VARCHAR(256) NOT NULL,
	date_of_creation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	article MEDIUMTEXT NOT NULL
);
Пример возврата из таблицы:
[(1, 'Some article', 'short subtitle', datetime.datetime(2023, 10, 20, 15, 1, 55), 'blah blah blah')]


Пример добавления и получения картинки из pictures:
with open('Cat2.jpg', 'br') as f:

    db.add_picture(f.read(), 'cat', 'image/jpeg')


@app.route("/", methods=["GET", "POST"])
def index():
    picture_data = db.find_picture_by_name('cat')

    return Response(picture_data[1], content_type=picture_data[3])		# Response нужно предварительно импортировать из flask


Пример создания и полученмя ссылки на статью в базе данных. А так-же получение id через ссылку.
import linksGenerator as lg
import Utils


page_width = 10

title = 'Бедный девопс'

# добавляем статью
db.add_new_article(title, 'Эх, бедолага!', '<b>Сегодня, с утра и до вечера, бедолага девопс не мог оживить умерший сайт...</b>')

# получаем id
article_id = db.get_data_for_search_by_substrinng(title, 1, 0)[0][0]

# создаём ссылку через модуль для генирации ссылок. 
# второе и третье числа - сегодняшнее число.
link = lg.create_link(title, 21, 10)

# добавляем новую ссылку в базу данных
db.add_link_to_article(link, article_id)

# первая строка выводит ссылку, вторая выводит id.
print(db.get_link_by_id(article_id))
print(db.get_id_by_link(link))



При вызове каждой функции вызывается фунуция log. Она отвечает за логирование. если логи не нужны, присвое ей labmda s: None

Т.к. я считаю что комментарии на русском в коде - не есть хорошо, все комментарии на инглише.
Все шаблоны функций можно найти в 'db data.txt'.